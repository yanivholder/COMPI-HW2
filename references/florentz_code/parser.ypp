%{
	#include "output.hpp"
	#include <iostream>

	extern int yylineno;
      extern char* yytext;
      extern int yyleng;
      extern int yylex();

      int yyerror(const char* message);
%}

%token VOID
%token INT
%token BYTE
%token B
%token BOOL
%token TRUE
%token FALSE
%token RETURN
%token DOTS
%token SET
%nonassoc IF
%nonassoc ELSE
%token WHILE
%token BREAK
%token CONTINUE
%token SC
%token COMMA
%token ID
%token NUM
%token STRING
%token COMMENT
%right ASSIGN
%left OR
%left AND
%left LEFTRELOP
%nonassoc RELOP
%left ADDBINOP
%left MULBINOP
%right NOT
%left RBRACE
%left LBRACE
%left RPAREN
%left LPAREN
%left RBRACKET
%left LBRACKET

%%


Program:              Funcs                                                     { output::printProductionRule(1); }
;
Funcs:                /* epsilon */                                             { output::printProductionRule(2); }
                      | FuncDecl Funcs                                          { output::printProductionRule(3); }
;
FuncDecl:             RetType ID LPAREN Formals RPAREN LBRACE Statements RBRACE { output::printProductionRule(4); }
;
RetType:              Type                                                      { output::printProductionRule(5); }
                      | VOID                                                    { output::printProductionRule(6); }
;
Formals:              /* epsilon */                                             { output::printProductionRule(7); }
                      | FormalsList                                             { output::printProductionRule(8); }
;
FormalsList:          FormalDecl                                                { output::printProductionRule(9); }
                      | FormalDecl COMMA FormalsList                            { output::printProductionRule(10); }
;
FormalDecl:           Type ID                                                   { output::printProductionRule(11); }
;
Statements:           Statement                                                 { output::printProductionRule(12); }
                      | Statements Statement                                    { output::printProductionRule(13); }
;
Statement:            LBRACE Statements RBRACE                                  { output::printProductionRule(14); }
                      | Type ID SC                                              { output::printProductionRule(15); }
                      | Type ID ASSIGN Exp SC                                   { output::printProductionRule(16); }
                      | ID ASSIGN Exp SC                                        { output::printProductionRule(17); }
                      | Call SC                                                 { output::printProductionRule(18); }
                      | RETURN SC                                               { output::printProductionRule(19); }
                      | RETURN Exp SC                                           { output::printProductionRule(20); }
                      | IF LPAREN Exp RPAREN Statement               %prec IF   { output::printProductionRule(21); }
                      | IF LPAREN Exp RPAREN Statement ELSE Statement           { output::printProductionRule(22); }
                      | WHILE LPAREN Exp RPAREN Statement                       { output::printProductionRule(23); }
                      | BREAK SC                                                { output::printProductionRule(24); }
                      | CONTINUE SC                                             { output::printProductionRule(25); }
;
Call:                 ID LPAREN ExpList RPAREN                                  { output::printProductionRule(26); }
                      | ID LPAREN RPAREN                                        { output::printProductionRule(27); }
;
ExpList:              Exp                                                       { output::printProductionRule(28); }
                      | Exp COMMA ExpList                                       { output::printProductionRule(29); }
;
Type:                 INT                                                       { output::printProductionRule(30); }
                      | BYTE                                                    { output::printProductionRule(31); }
                      | BOOL                                                    { output::printProductionRule(32); }
                      | SET LBRACKET NUM DOTS NUM RBRACKET                      { output::printProductionRule(33); }
;
Exp:                  LPAREN Exp RPAREN                                         { output::printProductionRule(34); }
                      | Exp ADDBINOP Exp                                        { output::printProductionRule(35); }
                      | Exp MULBINOP Exp                                        { output::printProductionRule(35); }
                      | ID                                                      { output::printProductionRule(36); }
                      | Call                                                    { output::printProductionRule(37); }
                      | NUM                                                     { output::printProductionRule(38); }
                      | NUM B                                                   { output::printProductionRule(39); }
                      | STRING                                                  { output::printProductionRule(40); }
                      | TRUE                                                    { output::printProductionRule(41); }
                      | FALSE                                                   { output::printProductionRule(42); }
                      | NOT Exp                                                 { output::printProductionRule(43); }
                      | Exp AND Exp                                             { output::printProductionRule(44); }
                      | Exp OR Exp                                              { output::printProductionRule(45); }
                      | Exp RELOP Exp                                           { output::printProductionRule(46); }
                      | Exp LEFTRELOP Exp                                       { output::printProductionRule(46); }
                      | LPAREN Type RPAREN Exp                                  { output::printProductionRule(47); }
;
%%

int main(){
	yyparse();
}

int yyerror(const char* message){
  output::errorSyn(yylineno);
  exit(0);
}
